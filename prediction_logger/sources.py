import abcimport osimport jsonfrom datetime import datetimefrom pathlib import Pathclass ForecastSource(abc.ABC):    @abc.abstractmethod    def load(self, date: datetime) -> dict:        """Load forecast data for a given date."""        passclass JSONFileForecastSource(ForecastSource):    def __init__(self, folder: str):        self.folder = folder  # Keep the folder path as provided    def load(self, date: datetime) -> dict:        # Try the folder path as-is first        folder_path = self.folder        if not os.path.isabs(folder_path):            # If it's not absolute, try relative to CWD            folder_path = os.path.abspath(os.path.join(os.getcwd(), self.folder))                    filename = os.path.join(folder_path, date.strftime("%Y-%m-%d") + ".json")                if not os.path.exists(folder_path):            raise FileNotFoundError(f"Forecast directory not found: {folder_path}")                    try:            with open(filename, 'r') as f:                data = json.load(f)        except FileNotFoundError:            raise FileNotFoundError(f"Forecast file not found: {filename}")        except json.JSONDecodeError as e:            raise ValueError(f"Invalid JSON in {filename}: {e}")        # Validate essential keys        if 'scenario' not in data or 'resistance' not in data:            raise KeyError(f"Forecast JSON missing required fields in {filename}")        return data