import sysimport ossys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))# Existing importsimport pytestimport jsonfrom datetime import datetimefrom prediction_logger.sources import JSONFileForecastSourcefrom pathlib import Pathdef test_json_file_forecast_source_missing_file():    """Test that a missing forecast file raises FileNotFoundError."""    source = JSONFileForecastSource(folder='tests')    date = datetime(2025, 7, 31)    with pytest.raises(FileNotFoundError):        source.load(date)def test_json_file_forecast_source_invalid_json(monkeypatch):    """Test that an invalid JSON file raises ValueError."""    monkeypatch.setattr('os.getcwd', lambda: os.path.dirname(__file__))  # Mock current directory    project_root = Path(__file__).resolve().parents[1]    forecast_path = project_root / 'forecast' / forecast_filename    try:        with open(forecast_path, 'w') as f:            f.write("{invalid_json}")  # Write invalid JSON        source = JSONFileForecastSource(folder=os.getcwd())        date = datetime(2025, 7, 31)        with pytest.raises(ValueError):            source.load(date)    finally:        if os.path.exists(forecast_path):            os.remove(forecast_path)def test_json_file_forecast_source_valid(monkeypatch):    """Test that a valid JSON file loads correctly."""    monkeypatch.setattr('os.getcwd', lambda: os.path.dirname(__file__))  # Mock current directory    project_root = Path(__file__).resolve().parents[1]    forecast_path = project_root / 'forecast' / forecast_filename    try:        with open(forecast_path, 'w') as f:            f.write(json.dumps({                "scenario": "fade",                "resistance": 23650,                "support": 23400            }))        source = JSONFileForecastSource(folder=os.getcwd())        date = datetime(2025, 7, 31)        forecast = source.load(date)        assert forecast['scenario'] == "fade"        assert forecast['resistance'] == 23650        assert forecast['support'] == 23400    finally:        if os.path.exists(forecast_path):            os.remove(forecast_path)