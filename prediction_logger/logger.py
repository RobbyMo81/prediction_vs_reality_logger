import loggingimport osimport jsonimport pandas as pdfrom datetime import datetimefrom .config import load_configfrom .sources import JSONFileForecastSourcefrom .notifications import notifyfrom pathlib import Pathlogging.basicConfig(level=logging.DEBUG)logging.debug(f"Current working directory: {os.getcwd()}")def run(date: datetime | None = None, actuals_source=None):    """    Execute one logging cycle: load forecast, fetch actuals, record result.    """    cfg = load_config()    date = date or datetime.now()    folder = cfg['forecast_folder']    source = JSONFileForecastSource(folder)    try:        forecast = source.load(date)    except Exception as e:        logging.error(f"Failed to load forecast: {e}")        notify(f"Error loading forecast for {date}: {e}")        return    # Fetch actuals via injection or default stub    try:        if actuals_source:            actuals = actuals_source(date)        else:            # TODO: replace with real data connector            actuals = {'high': forecast['resistance'] + 1, 'low': forecast.get('support', 0) - 1}    except Exception as e:        logging.error(f"Failed to fetch actuals: {e}")        notify(f"Error fetching actuals for {date}: {e}")        return    # Evaluate hit    scenario = forecast['scenario']    try:        if scenario == 'breakout':            hit = actuals['high'] >= forecast['resistance']        elif scenario == 'fade':            # For fade scenario, compare high to support level, falling back to resistance if support not provided            reference_level = forecast.get('support', forecast['resistance'])            hit = actuals['high'] <= reference_level        else:            logging.warning(f"Unknown scenario '{scenario}'")            hit = False    except Exception as e:        logging.error(f"Error evaluating scenario: {e}")        notify(f"Evaluation error for {date}: {e}")        return    # Record result    row = {        'date': date.strftime("%Y-%m-%d"),        'scenario': scenario,        'hit': int(hit),    }    # Append to CSV    csv_file = cfg['output_csv']    try:        df = pd.read_csv(csv_file)    except FileNotFoundError:        df = pd.DataFrame(columns=list(row.keys()))    except Exception as e:        logging.error(f"Error reading CSV: {e}")        notify(f"CSV read error: {e}")        return    # Create a new row DataFrame and concatenate    new_row = pd.DataFrame([row])    df = pd.concat([df, new_row], ignore_index=True)        # Ensure parent directory exists    os.makedirs(os.path.dirname(csv_file), exist_ok=True)        try:        df.to_csv(csv_file, index=False)    except Exception as e:        logging.error(f"Error writing CSV: {e}")        notify(f"CSV write error: {e}")def validate_forecast_path_consistency(config_path: str, forecast_filename: str) -> None:    """    Validates that the forecast file exists at the location specified in the config.    Raises descriptive errors if mismatch is found.        Args:        config_path (str): Path to the configuration JSON file.        forecast_filename (str): Filename of the forecast file to check.    """    # Resolve absolute path to config    config_path = os.path.abspath(config_path)        # Load config    try:        with open(config_path, "r") as f:            cfg = json.load(f)    except FileNotFoundError:        raise FileNotFoundError(f"Config file not found: {config_path}")    except json.JSONDecodeError as e:        raise ValueError(f"Invalid JSON in config file: {e}")        # Get forecast folder from config, resolve relative to CWD    forecast_folder = cfg.get("forecast_folder")    if not forecast_folder:        raise KeyError("Config missing required 'forecast_folder' key")        # Resolve to absolute path relative to CWD    config_folder = os.path.abspath(forecast_folder)    forecast_path = os.path.join(config_folder, forecast_filename)        # Debug output    print(f"[CONFIG] forecast_folder = {config_folder}")    print(f"[EXPECTED] Forecast file = {forecast_path}")    print(f"[CWD] Current Working Dir = {os.getcwd()}")        # Assert path validity    if not os.path.exists(forecast_path):        raise FileNotFoundError(            f"Forecast file '{forecast_filename}' not found in '{config_folder}'.\n"            f"Check config['forecast_folder'] and file creation path for alignment."        )