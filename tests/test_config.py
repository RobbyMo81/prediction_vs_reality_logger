import sysimport ossys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))# Existing importsimport pytestfrom prediction_logger.config import load_configfrom pathlib import Pathdef test_load_config_missing_file(monkeypatch):    """Test that a missing config file raises FileNotFoundError."""    monkeypatch.setattr('os.getcwd', lambda: os.path.dirname(__file__))  # Mock current directory    config_path = os.path.join(os.getcwd(), 'config.yaml')    if os.path.exists(config_path):        os.remove(config_path)  # Ensure file does not exist    with pytest.raises(FileNotFoundError):        load_config()def test_load_config_missing_keys(monkeypatch):    """Test that missing required keys raise KeyError."""    monkeypatch.setattr('os.getcwd', lambda: os.path.dirname(__file__))  # Mock current directory    config_path = os.path.join(os.getcwd(), 'config.yaml')    try:        with open(config_path, 'w') as f:            f.write("{}")  # Empty config        with pytest.raises(KeyError):            load_config()    finally:        if os.path.exists(config_path):            os.remove(config_path)def test_load_config_valid(monkeypatch):    """Test that a valid config file loads correctly."""    monkeypatch.setattr('os.getcwd', lambda: os.path.dirname(__file__))  # Mock current directory    config_path = os.path.join(os.getcwd(), 'config.yaml')    try:        with open(config_path, 'w') as f:            f.write("""            forecast_folder: forecasts            output_csv: data/nq_daily_eval.csv            schedule_time: "16:30"            slack_webhook_url: http://example.com/webhook            thinkorswim:              host: localhost              port: 8080              use_ssl: false            """)        config = load_config()        assert config['forecast_folder'] == 'forecasts'        assert config['output_csv'] == 'data/nq_daily_eval.csv'        assert config['schedule_time'] == "16:30"        assert config['slack_webhook_url'] == 'http://example.com/webhook'        assert config['thinkorswim']['host'] == 'localhost'    finally:        if os.path.exists(config_path):            os.remove(config_path)